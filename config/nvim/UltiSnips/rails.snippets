snippet pp "pretty print variable" b
pp "${1}"$0
endsnippet

snippet bb "byebug" b
byebug$0
endsnippet

snippet pry "Binding.pry" b
binding.pry$0
endsnippet

snippet itbb "It block with byebug statement" b
it { byebug }$0
endsnippet

snippet expjson "expect subject body to include json" b
expect(${1:subject.body}).to include_json(
	${2:key: prop}
)$0
endsnippet

snippet itget "it GET, expect response, thoughtbot style" b
it '${1:returns the expected json response}' do
	# 1. setup
	${2: ${3:variable_name} = create :$3 }
	${4}

	# 2. Action
	${5:get :${6:show}${7}}}
	${8}

	# 3. Expectation
	expect(${9:response.body}).to include_json(
		${10:key: prop}$0
	)
end
endsnippet

snippet validator "Introduce a custom ActiveModel::Validator" b
# frozen_string_literal: true
class ${1:ModelAttribute}Validator < ActiveModel::Validator
	def validate(record)
		return if record.${2:attribute}.nil?
		record.errors.add(:$2, "'#{record.$2}' is not valid")
	end
end$0
endsnippet

snippet model "A new ActiveRecord model" b
# frozen_string_literal: true
class ${1:modelClassName} < ActiveRecord::Base
$0
end
endsnippet

snippet factory "A new FactoryGirl factory" b
# frozen_string_literal: true
FactoryGirl.define do
  factory :${1:model_class_name} do
  $0
  end
end
endsnippet

snippet modelspec "Description" b
# frozen_string_literal: true
require 'integration/spec_helper'

describe ${1:model_class_name} do
$0
end
endsnippet

snippet mailspec "Expect ActionMailer::Deliveries deliver" b
sent_mail = ActionMailer::Base.deliveries.last
expect(sent_mail).to be_present
verify(format: :html) { sent_mail.html_part.body }
endsnippet

snippet exptc "Expect subject to change x" b
expect { subject }.to change { ${1:user.reload.updated_at} }$0
endsnippet

snippet references "Add reference to a table in a rails migration" b
t.references :${1:table_name}, ${2:index: true}, ${3:foreign_key: true}
endsnippet

snippet vcr "Add VCR cassette statement"
VCR.use_cassette('${1:cassette_name}') do |_cassette|
  ${0:${VISUAL:# content...}}
end
endsnippet

snippet	tt "Timecop travel"
Timecop.travel 45.days.from_now$0
endsnippet

snippet	tf "Timecop freeze"
Timecop.freeze 'August 3, 2013 3:00 +0200' do
  ${0:${VISUAL:# content...}}
end
endsnippet

snippet command "Pavlov Command" b
# frozen_string_literal: true
module Commands
  class ${1:command_class_name} < HackeroneCommand
    attribute :team, Object
  end
end
endsnippet

snippet frozen "frozen string literal" b
# frozen_string_literal: true
endsnippet
