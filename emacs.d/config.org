#+TITLE: Emacs Configuration
#+AUTHOR: Alexander Jeurissen
#+EMAIL: frailty.tithing.0n@icloud.com

* Refile
 These are action items that are captured using quick captured and subsequently refiled here.
gThey encompase various enhancements based on annoyances I run into when coding
 Addressing them will ensure my emacs configuration will adjust better to my daily workflow
** TODO  Add visual indentation config similar to my vim config
In my vim config I added custom bindings to ensure the region selection in visual mode remains
so I can do subsequent visual indents with >

In emacs + evil this is not working out of the box either and as such need to be configured.
:LOGBOOK:
CLOCK: [2024-06-12 Wed 17:47]--[2024-06-12 Wed 17:49] =>  0:02
:END:
[2024-06-12 Wed 17:47]
** DONE Add support for gcc / gc comment motions
in my vim configuration I have the ability to comment out using the gc motion, or gcc for the current line.
I need to look if this can be configured with some simple elisp or if evil has some configuration for this.
:LOGBOOK:
CLOCK: [2024-06-12 Wed 17:51]--[2024-06-12 Wed 17:52] =>  0:01
:END:
[2024-06-12 Wed 17:51]
** DONE add SPC-bd keybinding for deleting buffers (:bd)
[2024-06-10 Mon 14:04]
** DONE % in evil does not work with do..end blocks in ruby
:LOGBOOK:
CLOCK: [2024-06-12 Wed 17:57]--[2024-06-12 Wed 17:57] =>  0:00
:END:
[2024-06-12 Wed 17:57]
** DONE `*` in visual mode does not does perform incsearch for region
In vim I added custom configuration to make sure `*` in visual mode performs an inc search of the selected region.
I need to add this to my emacs configuration as well.
:LOGBOOK:
CLOCK: [2024-06-12 Wed 18:09]--[2024-06-12 Wed 18:10] =>  0:01
:END:
[2024-06-12 Wed 18:09]
** TODO yank ring copies directly to system clipboard
    In vim the system clipboard was under *" register.
    the separation between system clipboard and the yank ring was quite powerful.
    It allowed me to copy things to the *" register and still be able to make edits that would normally overwrite the yank register.

    Either I have to mimic this behavior or look into a actual yank history and see if Vertico etc. can search through it.
** DONE add grep support to Vertico
Figure out how we can perform greps in the most performant way and see matching results in Vertico
:LOGBOOK:
CLOCK: [2024-06-13 Thu 11:31]--[2024-06-13 Thu 11:31] =>  0:00
:END:
[2024-06-13 Thu 11:31]
** TODO Read up on web browsing and following links in emacs
https://www.howardism.org/Technical/Emacs/browsing-in-emacs.html
:LOGBOOK:
CLOCK: [2024-06-13 Thu 12:42]--[2024-06-13 Thu 12:42] =>  0:00
:END:
[2024-06-13 Thu 12:42]
** TODO hide minor modes
*** Evil Commentary mode
*** UnImpaired mode
*** Golden Ratio mode
*** Which key mode
** TODO Consult bookmark
** TODO `*` in visual mode does not does perform incsearch for region
In vim I added custom configuration to make sure `*` in visual mode performs an inc search of the selected region.
I need to add this to my emacs configuration as well.
:LOGBOOK:
CLOCK: [2024-06-12 Wed 18:09]--[2024-06-12 Wed 18:10] =>  0:01
:END:
[2024-06-12 Wed 18:09]
** [[https://www.reddit.com/r/emacs/s/9Abd0anSif][From the emacs community on Reddit: Small blog post on how I use Rails console remotely within Doom Emacs]]
** [[https://www.reddit.com/r/emacs/s/XaTdede79O][From the emacs community on Reddit: Emacs: modern minibuffer packages (Vertico, Consult, etc.)]]
<2024-06-16 Sun>
** [[https://www.reddit.com/r/emacs/s/GFDeSBVaex][From the emacs community on Reddit]]
<2024-06-16 Sun>
** [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain Text!]]
** DONE Add support for Fiscal Quarters to org mode
It would be nice to have support for fiscal quarters so I can at least
in org calendar go by quarter.

:LOGBOOK:
CLOCK: [2024-06-13 Thu 14:37]--[2024-06-13 Thu 14:40] =>  0:03
:END:
[2024-06-13 Thu 14:37]
** TODO Read up on web browsing and following links in emacs
https://www.howardism.org/Technical/Emacs/browsing-in-emacs.html
:LOGBOOK:
CLOCK: [2024-06-13 Thu 12:42]--[2024-06-13 Thu 12:42] =>  0:00
:END:
[2024-06-13 Thu 12:42]
* I. Core Configuration
** Package Management
#+BEGIN_SRC emacs-lisp
  ;; Initialize package sources
  (require 'package)
  (setq package-archives '(("org" . "https://orgmode.org/elpa/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ;; ("melpa" . "https://melpa.org/packages/")
                           ("gnu" . "https://elpa.gnu.org/packages/")))
  (setq package-enable-at-startup nil)
  (package-initialize)

  ;; Refresh package contents
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Use-package bootstrapping
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC

** Emacs Server Configuration
#+BEGIN_SRC emacs-lisp
(use-package server
  :config
  (unless (server-running-p)
    (server-start))
  (setq server-window 'pop-to-buffer))
#+END_SRC

* II. User Interface and Editor Behavior
** General Options

#+BEGIN_SRC emacs-lisp
  ;; MacOS Keybindings
  ;; (setq mac-command-modifier 'meta)
  ;; (setq mac-option-modifier 'none)

  ;; Disable Alarms/Bells
  (setq ring-bell-function 'ignore)

  ;; Indentation Settings
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 2)

  ;; Simplify Prompts
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Confirm Exit
  (setq confirm-kill-emacs 'y-or-n-p)

  ;; Disable Startup Screens
  (setq inhibit-splash-screen t
        inhibit-startup-message t
        inhibit-startup-echo-area-message t)

  ;; UI Settings
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (global-display-line-numbers-mode 1)
  (add-to-list 'default-frame-alist '(fullscreen . fullboth))

  ;; Parenthesis Matching
  (show-paren-mode 1)

  ;; Column Numbers
  (column-number-mode 1)

  ;; Fringe Settings
  (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
  (setq-default left-fringe-width nil)

  ;; Pretty Symbols
  (global-prettify-symbols-mode t)

  ;; Highlight Current Line
  (global-hl-line-mode 1)

  ;; Large File Warning
  (setq large-file-warning-threshold nil)
  (setq split-width-threshold nil)

  ;; Follow Symlinks
  (setq vc-follow-symlinks t)
#+END_SRC

** Font Settings
*** Default Font for Monospaced Text
   This sets the default font for Emacs to use the monospaced variation of `BlexMonoNerdFont`.

   #+BEGIN_SRC emacs-lisp
   (set-face-attribute 'default nil
                       :family "BlexMono Nerd Font Mono"
                       :height 140) ;; Adjust height as needed
   #+END_SRC

*** Variable-Pitch Font for Regular Text
   This sets the font for `variable-pitch` mode to use the non-monospaced variation of `BlexMonoNerdFont`.

   #+BEGIN_SRC emacs-lisp
     (set-face-attribute 'variable-pitch nil
                         :family "BlexMono Nerd Font Propo"
                         :height 140) ;; Adjust height as needed
   #+END_SRC

*** Fixed-Pitch Font for Monospaced Text
This sets the font for fixed-pitch to ensure consistent monospaced text in areas where it is needed.

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'fixed-pitch nil
                    :family "BlexMono Nerd Font Mono"
                    :height 140) ;; Adjust height as needed
#+END_SRC
*** Enable Variable-Pitch Mode in Org-Mode
   This ensures that `org-mode` uses `variable-pitch-mode` for regular text.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook 'variable-pitch-mode)
   #+END_SRC

*** Set fallback for unicode characters
#+BEGIN_SRC emacs-lisp
  ;; Set fallback font for Unicode characters
  (set-fontset-font t 'unicode "BlexMono Nerd Font Mono" nil 'prepend)
#+END_SRC
** Themes
Various colorschemes / themes.
I select them based using the following guiding principles:
- *Accessibility First*: Designed with a strong emphasis on accessibility, ensuring readability and usability
- *high contrast*: sufficient contrast and color differentiation preferably _WCAG_ compliant.
- *Color harmony*: Uses carefully selected color palettes to maintain visual harmony and reduce cognitive load.
- *Consistent Look and Feel*: Should provide a consistent visual experience across various modes and interfaces in Emacs.
- *light theme*: The theme should provide a light background option.

#+BEGIN_SRC emacs-lisp
  ;;(customize-set-variable 'custom-safe-themes t)

  (use-package modus-themes
    :ensure t
    :config
      ;; Load Modus Light theme
      (setq modus-themes-italic-constructs t
            modus-themes-bold-constructs t
            modus-themes-mixed-fonts t
            modus-themes-variable-pitch-ui nil
            modus-themes-custom-auto-reload t
            modus-themes-disable-other-themes t
            modus-themes-mixed-fonts t)
    (load-theme 'modus-operandi t))
    ;; (load-theme 'modus-vivendi t))

  ;; (use-package spacemacs-theme
  ;;   :ensure t
  ;;   :config
  ;;     (load-theme 'spacemacs-light t))
#+END_SRC
** General.el leader  Configuration
    #+BEGIN_SRC emacs-lisp
            (use-package general
                :ensure t
                :init
                  (general-evil-setup t)
                :config
                  ;; Set space as the leader key in normal and visual states
                  (general-create-definer my-leader-def
                      :keymaps '(normal visual emacs)
                      :prefix "SPC"
                      :global-prefix "C-SPC")

                  (my-leader-def '(normal emacs)
                      "f"  '(:ignore t :which-key "files")
                      "fe" '(:ignore t :which-key "emacs config")
                      "fed" '(aj/open-config-org :which-key "edit config.org")
                      "ff" '(find-file :which-key "find file")
                      "fs" '(save-buffer :which-key "save file")
                      "b"  '(:ignore t :which-key "buffers")
                      "bb" '(consult-buffer :which-key "switch buffer")
                      "bd" '(kill-this-buffer :which-key "kill buffer")
                      "w"  '(:ignore t :which-key "windows")))

              (use-package which-key
                  :ensure t
                  :config
                      (which-key-mode))
    #+END_SRC
** Window / Split Configuration
*** Golden ratio
  golden-ratio  automatically adjusts the sizes of windows based on the golden ratio when you switch between them
  ensuring that the focused window is larger while other windows are smaller, but still visible.

  #+BEGIN_SRC emacs-lisp
(use-package golden-ratio
    :ensure t
    :init
        (golden-ratio-mode 1)
    :config
        (setq golden-ratio-auto-scale t)
        (setq golden-ratio-extra-commands
                (append golden-ratio-extra-commands
                        '(evil-window-left
                        evil-window-right
                        evil-window-up
                        evil-window-down
                        evil-window-split
                        evil-window-vsplit)))
        (setq golden-ratio-exclude-modes '("dired-mode"
                                          "ediff-mode")))
  #+END_SRC
*** Zoom window
    zoom-window provides window zoom like tmux zoom and unzoom.

    #+BEGIN_SRC emacs-lisp
            (use-package zoom-window
                :ensure t
                :bind ("C-x C-z" . zoom-window-zoom)
                :config
                    (my-leader-def 'normal
                        "wz" '(zoom-window-zoom :which-key "toggle zoom window"))
                :custom
                    (zoom-window-mode-line-color "Yellow"))
    #+END_SRC
*** Golden ratio / zoom-window harmony
  Emacs zoom-window and golden-ratio packages are designed to manage window sizes in Emacs, but they approach this task in different ways, which could lead to conflicts if used simultaneously.

	•	zoom-window: This package provides a way to zoom into a single window, making it temporarily full screen within the Emacs frame. It allows you to focus on one window without distractions and can toggle back to the previous window configuration.
	•	golden-ratio: This package automatically adjusts the sizes of windows based on the golden ratio when you switch between them, ensuring that the focused window is larger while other windows are smaller, but still visible.

  To resolve this we will disable golden-ratio when we use zoom in (maximize) and re-enable it again when we zoom out.

#+BEGIN_SRC emacs-lisp
(defun aj/disable-golden-ratio ()
  "Disable golden-ratio mode."
  (golden-ratio-mode -1))

(defun aj/enable-golden-ratio ()
  "Enable golden-ratio mode."
  (golden-ratio-mode 1))

;;(add-hook 'zoom-window-mode-hook #'aj/disable-golden-ratio)
;;(add-hook 'zoom-window-leave-hook #'aj/enable-golden-ratio)
#+END_SRC
** Dired configuration
 We aim to make Dired behave more like Netrw & Vinegar vim plugin by tpope.
*** Dired configuration
#+BEGIN_SRC emacs-lisp
  ;; Dired configuration to reduce clutter
  (use-package dired
    :ensure nil
    :config
    ;; This line sets the variable dired-listing-switches to "-alh". This is a string of command-line options passed to the ls command (which dired uses to list directory contents). The options mean:

    ;; •	-a: Include all files, even those starting with a dot (hidden files).
    ;; •	-l: Use a long listing format.
    ;; •	-h: Human-readable sizes (e.g., 1K, 2M).
    (setq dired-listing-switches "-alh")

    ;; This enables “Do What I Mean” (DWIM) target functionality. When enabled, if you have two dired buffers open in split windows, dired will assume the other buffer as the target for file operations (e.g., copying or moving files).
    (setq dired-dwim-target t)

    ;; This enables the dired-find-alternate-file command. By default, this command is disabled. When enabled, you can use the a key in dired to open files and directories in the same buffer, replacing the current buffer’s contents, rather than opening a new buffer.
    (put 'dired-find-alternate-file 'disabled nil) ; Enable 'a' command

    ;; This line adds a hook to dired-mode, which runs a lambda function whenever dired-mode is activated. The lambda function enables dired-omit-mode, which hides files that are typically considered uninteresting (like backup files and temporary files).
    (add-hook 'dired-mode-hook (lambda ()
                                 (dired-omit-mode 1)))
    ;; This line defines a key binding in dired-mode. It binds the - key to the dired-up-directory command, which allows you to navigate to the parent directory.
    (define-key dired-mode-map (kbd "-") 'dired-up-directory))

  (defun aj/open-dired-in-current-directory ()
    "Open `dired` in the directory of the current file."
    (interactive)
        (dired (file-name-directory (or (buffer-file-name) default-directory))))

  (with-eval-after-load 'evil
    (evil-define-key 'normal 'global (kbd "-") 'aj/open-dired-in-current-directory))
#+END_SRC
*** Diminish minor modes

#+BEGIN_SRC emacs-lisp
    (use-package diminish
        :ensure t)
            (diminish 'dired-omit-mode)
            (diminish 'dired-hide-details-mode)
#+END_SRC
*** Dotfiles visibility
Add a toggle for dotfiles visibility
pressing . will togle between hidden and shown.
By default we don't show dotfiles

#+BEGIN_SRC emacs-lisp
(defvar dired-dotfiles-show-p t "Toggle for showing dot-files in dired.")

(defun dired-dotfiles-toggle ()
  "Show/hide dot-files"
  (interactive)
  (setq dired-dotfiles-show-p (not dired-dotfiles-show-p))
  (dired-revert))

(add-hook 'dired-after-readin-hook 'dired-hide-dotfiles)
(define-key dired-mode-map (kbd ".") 'dired-dotfiles-toggle)

(defun dired-hide-dotfiles ()
  "Hide dot-files in dired."
  (when (not dired-dotfiles-show-p)
    (dired-mark-files-regexp "^\\\.")
    (dired-do-kill-lines)))
#+END_SRC
*** Single buffer configuration
Dired by default creates new buffers for each folder
This ensures we only have a single buffer configuration
reducing the amount of leftover dired buffers
#+BEGIN_SRC emacs-lisp
(use-package dired-single
  :ensure t)

(defun my-dired-mode-hook ()
  (define-key dired-mode-map [remap dired-find-file] 'dired-single-buffer)
  (define-key dired-mode-map [remap dired-mouse-find-file-other-window] 'dired-single-buffer-mouse)
  (define-key dired-mode-map [remap dired-up-directory] 'dired-single-up-directory))

(add-hook 'dired-mode-hook 'my-dired-mode-hook)
#+END_SRC

*** Copy file under cursor
I often find myself wanting to copy the path to a file under cursor when in *Dired* mode.
The CWD is shown at the top of the buffer but copying it is tedious.
So let's define a binding that uses built-in dired functions to copy the path.

#+BEGIN_SRC emacs-lisp
(define-key dired-mode-map (kbd "C-c C-p") 'aj/dired-copy-full-path)

(defun aj/dired-copy-full-path ()
  "Copy the current file path to the clipboard."
  (interactive)
  (let ((file-path (dired-get-file-for-visit)))
    (kill-new file-path)
    (message "Copied: %s" file-path)))
#+END_SRC
** Corfu.el Configuration
Corfu enhances in-buffer completion with a small completion popup.
Corfu is the minimalistic in-buffer completion counterpart of the *Vertico* minibuffer UI.

#+BEGIN_SRC emacs-lisp
  (use-package corfu
    :ensure t
    :init
    (global-corfu-mode)
    :config
      (setq
        corfu-auto t                ;; Enable auto completion
        corfu-cycle nil             ;; Disable cycling for completions
        corfu-preselect-first t     ;; Preselect the first completion candidate
        corfu-auto-prefix 1         ;; Minimum prefix length for auto completion
        corfu-auto-delay 0.1        ;; Delay for auto completion
        corfu-quit-at-boundary t    ;; Keep the Corfu popup open at the boundary
        corfu-quit-no-match t     ;; Keep the Corfu popup open if there are no matches
        corfu-preview-current t)  ;; Disable previewing the current candidate

      ;; Key bindings
      (define-key corfu-map (kbd "TAB") 'corfu-complete)
      (define-key corfu-map (kbd "C-n") 'corfu-next)
      (define-key corfu-map (kbd "C-k") 'corfu-previous)

      ;; Ensure completion is managable in eshell
      (add-hook 'eshell-mode-hook
                (lambda ()
                  (setq-local corfu-auto nil)
                  (corfu-mode))))

  (use-package emacs
    :init
      ;; Enable indentation+completion using the TAB key.
      ;; `completion-at-point' is often bound to M-TAB.
      (setq tab-always-indent 'complete)

      ;; Emacs 30 and newer: Disable Ispell completion function. As an alternative,
      ;; try `cape-dict'.
      (setq text-mode-ispell-word-completion nil)

      ;; Emacs 28 and newer: Hide commands in M-x which do not apply to the current
      ;; mode.  Corfu commands are hidden, since they are not used via M-x. This
      ;; setting is useful beyond Corfu.
      (setq read-extended-command-predicate #'command-completion-default-include-p))

  (use-package kind-icon
    :ensure t
    :after corfu
    ;:custom
    ; (kind-icon-blend-background t)
    ; (kind-icon-default-face 'corfu-default) ; only needed with blend-background
    :config
      (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+END_SRC

** Yasnippet Configuration
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t)
#+END_SRC

** Diff-hl Configuration
#+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :ensure t
  :hook ((prog-mode . turn-on-diff-hl-mode)
         (vc-dir-mode . turn-on-diff-hl-mode)))
#+END_SRC
** hl-todo Configuration
#+BEGIN_SRC emacs-lisp
  (use-package hl-todo
    :ensure t
    :hook (prog-mode . hl-todo-mode)
    :config
      ;; Set the colors based on the modus theme
    (setq hl-todo-keyword-faces
        `(("TODO" . "#ff9580")
          ("HACK" . "#ff9580")
          ("FIXME" . "#ff9580")
          ("NOTE" . "#82b0ec"))))
#+END_SRC
** Utility Functions
#+BEGIN_SRC emacs-lisp
  (defun hrs/comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
      (if (region-active-p)
          (setq beg (region-beginning) end (region-end))
        (setq beg (line-beginning-position) end (line-end-position)))
      (comment-or-uncomment-region beg end)))

  (defun aj/newline-before ()
    "Insert a newline(s) above the current cursor position."
    (interactive)
    (save-excursion
      (move-beginning-of-line 1)
      (newline)))

  (defun aj/newline-after ()
    "Insert a newline(s) below the current cursor position."
    (interactive)
    (save-excursion
      (move-end-of-line 1)
      (newline)))

  (defun aj/open-config-org ()
    "Open the config.org file in the .emacs.d directory."
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (defun aj/visual-star-search ()
    "Perform an incremental search with the text in the selected region without altering the yank buffer."
    (interactive)
    (when (use-region-p)
      (let ((search-text (buffer-substring-no-properties (region-beginning) (region-end))))
        (deactivate-mark)
        (evil-ex-search-activate-highlight search-text)
        (setq evil-ex-search-pattern (evil-ex-make-search-pattern search-text))
        (evil-ex-search-next)
        (evil-ex-search-update-pattern evil-ex-search-pattern))))

  (defun hrs/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))

  (defun hrs/add-auto-mode (mode &rest patterns)
    "Add entries to `auto-mode-alist` to use `MODE` for all given file `PATTERNS`."
    (dolist (pattern patterns)
      (add-to-list 'auto-mode-alist (cons pattern mode))))

  ;; Remove trailing whitespace before saving
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

* III. Evil Mode and Extensions
** Evil want-keybinding
Set evil-want-keybinding to nil before loading evil or evil-collection

#+BEGIN_SRC emacs-lisp
(setq evil-want-keybinding nil)
#+END_SRC

** Evil Mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
      :config
      (evil-mode 1))

  ;; Use C-u as page up in evil mode
  (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
  (define-key evil-visual-state-map (kbd "C-u") 'evil-scroll-up)

  ;; Use C-r for redo in evil mode
  (evil-set-undo-system 'undo-redo)

  ;; Ensure shift-width is set to 2
  (setq-default evil-shift-width 2)

  ;; Make * perform IncSearch for text in region
  (define-key evil-visual-state-map (kbd "*") 'aj/visual-star-search)
#+END_SRC

** Evil Collection Configuration

#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :ensure t
  :config
  (evil-collection-init '(magit dired eshell corfu vertico docker ediff)))
#+END_SRC

** Evil Leader Configuration
#+BEGIN_SRC emacs-lisp
(use-package evil-leader
  :ensure t
  :config
  (global-evil-leader-mode))
#+END_SRC

** Evil Surround Configuration
#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+END_SRC

** Evil Rails Configuration
#+BEGIN_SRC emacs-lisp
  ;; (use-package evil-rails
  ;;   :ensure t
  ;;   :config
  ;;   (defgroup evil-rails nil
  ;;     "Evil Rails customizations."
  ;;     :prefix "evil-rails-"
  ;;     :group 'evil-rails))
#+END_SRC
** Evil Commentary
This package provides Vim’s gc and gcc comment motion, making it very similar to vim-commentary.
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :ensure t
    :config
    (evil-commentary-mode))
#+END_SRC
** Evil Matchit Configuration
#+BEGIN_SRC emacs-lisp
(use-package evil-matchit
  :ensure t
  :config
  (global-evil-matchit-mode 1))
#+END_SRC
* IV. Language-Specific Configurations
** Treesitter
#+BEGIN_SRC emacs-lisp
  (use-package tree-sitter
    :ensure t
    :config
    (global-tree-sitter-mode)
    )
#+END_SRC
*** Treesitter auto
#+BEGIN_SRC emacs-lisp
  ;; (use-package treesit-auto
  ;;   :custom
  ;;   (treesit-auto-install 'prompt)
  ;;   :config
  ;;     (treesit-auto-add-to-auto-mode-alist 'all)
  ;;     (delete 'awk treesit-auto-langs)
  ;;     (global-treesit-auto-mode)
  ;; )
#+END_SRC
** Ruby Development

*** Ruby Mode Hook
#+BEGIN_SRC emacs-lisp
  (add-hook 'ruby-mode-hook
            (lambda ()
              (setq ruby-insert-encoding-magic-comment t)
              (yas-minor-mode)
              (flycheck-mode)))
              ;;(define-key ruby-mode-map (kbd "C-c C-c") 'xmp)
#+END_SRC

*** Enable Ruby Mode for Additional File Patterns
#+BEGIN_SRC emacs-lisp
  ;; (hrs/add-auto-mode
  ;;   'ruby-mode
  ;;   "\\Gemfile$"
  ;;   "\\.rake$"
  ;;   "\\.gemspec$"
  ;;   "\\Guardfile$"
  ;;   "\\Rakefile$")
#+END_SRC

*** REVIEW Add Pry-Remote Functionality
We need to review if we still need pry-remote functionality.

#+BEGIN_SRC emacs-lisp
;; (defun aj/run-remote-pry (&rest args)
;;   "Run pry-remote in a comint buffer."
;;   (interactive)
;;   (let ((buffer (apply 'make-comint "pry-remote" "pry-remote" nil args)))
;;     (switch-to-buffer buffer)
;;     (setq-local comint-process-echoes t)))
;;
;; (define-key ruby-mode-map (kbd "C-c r d") 'aj/run-remote-pry)
#+END_SRC

*** Inf Ruby Configuration
#+BEGIN_SRC emacs-lisp
    (use-package inf-ruby
      :ensure t
      :config
      (add-hook 'after-init-hook 'inf-ruby-switch-setup)
      (setq inf-ruby-default-implementation "pry")

      (add-hook 'inf-ruby-mode-hook
        (function
          (lambda ()
            (setq show-trailing-whitespace nil)
            (setq-local corfu-auto nil)
            (corfu-mode)))))
#+END_SRC

** Web Development
*** Javascript mode
#+BEGIN_SRC emacs-lisp

#+END_SRC
*** Web Mode Configuration
#+BEGIN_SRC emacs-lisp
(defun aj/web-mode-setup ()
  "Custom configurations for web-mode."
  (when (string-match-p "\\.html\\.erb\\'" buffer-file-name)
    (ruby-ts-mode)))

(use-package web-mode
  :ensure t
  :hook ((web-mode . rainbow-mode)
         (web-mode . rspec-mode)
         (web-mode . aj/web-mode-setup)
         (web-mode . (lambda ()
                       (setq web-mode-markup-indent-offset 2))))
  :mode ("\\.erb\\'"
         "\\.html\\'"
         "\\.php\\'"
         "\\.rhtml\\'"))
#+END_SRC

*** Rainbow Mode Configuration
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t)
#+END_SRC

** Go Development
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    :mode "\\.go\\'")
#+END_SRC


** LSP settings
*** Packages
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :hook ((
               js-mode         ; ts-ls (tsserver wrapper)
               js-jsx-mode     ; ts-ls (tsserver wrapper)
               typescript-mode ; ts-ls (tsserver wrapper)
               web-mode        ; ts-ls/HTML/CSS
               ruby-mode ;; solargraph-language-server
               go-mode
               go-ts-mode
               ) . lsp)
       :commands lsp
       :config
        (setq lsp-clients-ruby-server-command 'solargraph))

        (my-leader-def 'normal
          "="  '(lsp-format-buffer :which-key "LSP format buffer"))

       (use-package lsp-ui
         :commands lsp-ui-mode)

     (with-eval-after-load 'lsp-mode
       (add-to-list 'lsp-language-id-configuration '(web-mode . "html.erb")))
   #+END_SRC

*** lsp-mode settings
    This setting enables lsp-mode to automatically guess the project root directory
    by looking for a relevant project file (like .git, Gemfile, etc.).
    #+BEGIN_SRC emacs-lisp
          (setq lsp-auto-guess-root t)
    #+END_SRC

    Disables logging of the input/output communication between Emacs and the language server.
    Setting this to nil can improve performance and reduce the amount of logged information unless you are debugging.
    #+BEGIN_SRC emacs-lisp
          (setq lsp-log-io nil)
    #+END_SRC

    Automatically restarts the language server if it crashes or is killed.
    #+BEGIN_SRC emacs-lisp
          (setq lsp-restart 'auto-restart)
    #+END_SRC

    Enables highlighting of all instances of the symbol under the cursor.
    This makes it easier to see where a variable or function is used in your code.
    #+BEGIN_SRC emacs-lisp
          (setq lsp-enable-symbol-highlighting t)
    #+END_SRC


    Enables/Disables automatic formatting of code as you type.
    #+BEGIN_SRC emacs-lisp
          (setq lsp-enable-on-type-formatting nil)
    #+END_SRC


    Enables/Disables automatic display of function signatures when typing.
    Disabling this can reduce distraction if you find signature pop-ups intrusive.
    #+BEGIN_SRC emacs-lisp
          (setq lsp-signature-auto-activate nil)
    #+END_SRC


    Enables/Disables rendering of documentation in function signature pop-ups.
    Disabling this setting helps reduce clutter in the signature display if you only want to see the function parameters.

    #+BEGIN_SRC emacs-lisp
      (setq lsp-signature-render-documentation nil)
    #+END_SRC

    Disables eldoc integration, which typically shows function signatures and documentation in the minibuffer. Disabling it can reduce minibuffer distraction.
    #+BEGIN_SRC emacs-lisp
            (setq lsp-eldoc-hook nil)
    #+END_SRC

    Disables the display of code actions (like quick fixes and refactoring options) in the modeline. This can simplify the modeline if you find it too busy.
    #+BEGIN_SRC emacs-lisp
              (setq lsp-modeline-code-actions-enable nil)
    #+END_SRC

    Disables the display of diagnostic counts (like errors and warnings) in the modeline. This setting helps keep the modeline clean.

    #+BEGIN_SRC emacs-lisp
            (setq lsp-modeline-diagnostics-enable nil)
    #+END_SRC

    Disables the breadcrumb feature in the headerline, which shows the current context (like class and method names) in the buffer. Disabling this can simplify the headerline.
    #+BEGIN_SRC emacs-lisp
            (setq lsp-headerline-breadcrumb-enable nil)
    #+END_SRC

    Disables semantic token support, which provides advanced syntax highlighting based on the language server’s understanding of the code. Disabling this might improve performance if semantic tokens are not critical to your workflow.
    #+BEGIN_SRC emacs-lisp
            (setq lsp-semantic-tokens-enable nil)
    #+END_SRC

    Disables code folding capabilities provided by the language server. If you do not use code folding, disabling it can streamline the lsp-mode behavior.
    #+BEGIN_SRC emacs-lisp
            (setq lsp-enable-folding nil)
    #+END_SRC

    Disables the integration with imenu, which provides an index of definitions in the buffer. If you do not use imenu, this can simplify the lsp-mode configuration.
    #+BEGIN_SRC emacs-lisp
            (setq lsp-enable-imenu nil)
    #+END_SRC

    Disables snippet support in lsp-mode. If you prefer to use a separate snippet management package like yasnippet, this setting can avoid conflicts.
    #+BEGIN_SRC emacs-lisp
            (setq lsp-enable-snippet nil)
    #+END_SRC

    Increases the maximum amount of data (to 1MB) that Emacs can read from a process in one go. This setting can improve performance when dealing with large amounts of data from the language server.
    #+BEGIN_SRC emacs-lisp
            (setq read-process-output-max (* 1024 1024)) ;; 1MB
    #+END_SRC

    Sets the delay (in seconds) before lsp-mode starts processing changes after you stop typing. A shorter delay means more responsive updates from the language server, while a longer delay can reduce CPU usage.
    #+BEGIN_SRC emacs-lisp
            (setq lsp-idle-delay 0.5)
    #+END_SRC

*** lsp-ui settings
    This setting disables the lsp-ui-doc feature, which normally displays documentation in a hover pop-up when you hover over symbols in your code.

    #+BEGIN_SRC emacs-lisp
    (setq lsp-ui-doc-enable nil)
    #+END_SRC

    This setting enables the header in the lsp-ui-doc pop-up.
    When *lsp-ui-doc* is enabled, this will show a header in the documentation pop-up, typically displaying the symbol’s type or name.
    #+BEGIN_SRC emacs-lisp
    (setq lsp-ui-doc-header t)
    #+END_SRC

    This setting includes the signature of the symbol in the lsp-ui-doc pop-up.
    When *lsp-ui-doc* is enabled, it will include function signatures or type information in the pop-up documentation.
    This can be useful for understanding the parameters and return types of functions.
    #+BEGIN_SRC emacs-lisp
    (setq lsp-ui-doc-include-signature t)
    #+END_SRC

    This sets the border color of the lsp-ui-doc pop-up to match the foreground color of the default face.
    When *lsp-ui-doc* is enabled, the border of the documentation pop-up will have the same color as the text.
    This makes it visually consistent with the theme.
    #+BEGIN_SRC emacs-lisp
    (setq lsp-ui-doc-border (face-foreground 'default))
    #+END_SRC

    This setting enables the display of code actions in the sideline.
    *lsp-ui-sideline* will show available code actions (like quick fixes, refactorings, etc.) in the *sideline*, which is a small overlay next to the code.
    This makes it easier to see and apply code actions directly where they are needed.
    #+BEGIN_SRC emacs-lisp
    (setq lsp-ui-sideline-show-code-actions t)
    #+END_SRC

    This sets the delay (in seconds) before lsp-ui-sideline shows hover information and code actions.
    The sideline information will appear  when you move the cursor over symbols or errors.
    #+BEGIN_SRC emacs-lisp
    (setq lsp-ui-sideline-delay 0.05)
    #+END_SRC

* V. Project Management and Tools
** Project.el configuration

#+BEGIN_SRC emacs-lisp
(use-package project
    :ensure t
    :config
        (my-leader-def 'normal
          "p"  '(:ignore t :which-key "project")
          "pf"  '(consult-find :which-key "find file")
          "pb"  '(consult-project-buffer :which-key "switch to buffer")
          "p/"  '(consult-ripgrep :which-key "grep")
          "pp"  '(project-switch-project :which-key "switch project"))

        (setq project-switch-commands
                '((?f "Find file" consult-find)
                  (?g "Find regexp" consult-ripgrep)
                  (?d "Find directory" project-dired)
                  (?m "Magit" magit-project-status)
                  (?e "Eshell" project-eshell)
                  (?b "Switch to buffer" project-switch-to-buffer))))
#+END_SRC

** Docker Configuration
#+BEGIN_SRC emacs-lisp
(use-package docker
  :ensure t
  :bind ("C-c d" . docker))
#+END_SRC

** TODO Devcontainer configuration
Most of my work occurs in devcontainers. Therefore it's important that I'm able to quickly:
1. start the dev container from emacs
2. ensure that projectile switches the root to the remote workspace folder

#+BEGIN_SRC emacs-lisp
  (require 'tramp)
  (require 'subr-x)  ;; For string manipulation functions

(defun aj/run-devcontainer ()
  "Run 'devcontainer up --workspace-folder .' in the current projectile project,
  parse the output, connect to the container, and open the remote workspace folder in dired.
  Also set the projectile root to the remote workspace folder."
    (interactive)
    (let* ((default-directory (projectile-project-root))
          (output (shell-command-to-string "devcontainer up --workspace-folder ."))
          (container-id (if (string-match "\"containerId\":\"\\([^\"]+\\)\"" output)
                            (match-string 1 output)))
          (workspace-folder (if (string-match "\"remoteWorkspaceFolder\":\"\\([^\"]+\\)\"" output)
                                (match-string 1 output)))
          (tramp-path (concat "/docker:" container-id ":" workspace-folder)))
      (unless (and container-id workspace-folder)
        (error "Failed to parse devcontainer output"))
      (dired tramp-path)
      (setq projectile-project-root tramp-path)
      (projectile-add-known-project tramp-path)
      (projectile-invalidate-cache nil)
      (projectile-cache-current-file)
      (message "Connected to container %s and set projectile root to %s" container-id tramp-path)))


  (my-leader-def 'normal
    "p"  '(:ignore t :which-key "projectile")
    "pd" '(aj/run-devcontainer :which-key "run devcontainer in project"))
#+END_SRC
* VI. Writing and Text Editing
** Writeroom Mode Configuration

*** Writeroom Mode
#+BEGIN_SRC emacs-lisp
(use-package writeroom-mode
  :ensure t
  :hook (writeroom-mode . wc-mode))
#+END_SRC

*** Word Count Mode
#+BEGIN_SRC emacs-lisp
(use-package wc-mode
  :ensure t)
#+END_SRC

** Flycheck Configuration for Proselint
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :hook ((text-mode . flycheck-mode)
         (markdown-mode . flycheck-mode)
         (gfm-mode . flycheck-mode)))

(flycheck-define-checker proselint
  "A linter for prose."
  :command ("proselint" source-inplace)
  :error-patterns
  ((warning line-start (file-name) ":" line ":" column ": "
            (id (one-or-more (not (any " "))))
            (message (one-or-more not-newline)
                     (zero-or-more "\n" (any " ") (one-or-more not-newline)))
            line-end))
  :modes (text-mode markdown-mode gfm-mode))

(add-to-list 'flycheck-checkers 'proselint)
#+END_SRC

** ORG Mode
*** ORG path
Define the org path and store it in a variable for easier referencing

#+BEGIN_SRC emacs-lisp
;; define the org path
(setq aj/org-path "/Users/alexander/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org")
#+END_SRC

*** ORG Mode settings
Set various Org mode settings to enhance usability and appearance.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :config
      ;; Basic Org settings
      (set-face-attribute 'org-level-1 nil :inherit 'outline-1 :height 1.4)
      (set-face-attribute 'org-level-2 nil :inherit 'outline-2 :height 1.3)
      (set-face-attribute 'org-level-3 nil :inherit 'outline-3 :height 1.2)
      (set-face-attribute 'org-level-4 nil :inherit 'outline-4 :height 1.1)
      (set-face-attribute 'org-level-5 nil :inherit 'outline-5 :height 1.0)
      (set-face-attribute 'org-level-6 nil :inherit 'outline-6 :height 1.0)
      (set-face-attribute 'org-level-7 nil :inherit 'outline-7 :height 1.0)
      (set-face-attribute 'org-level-8 nil :inherit 'outline-8 :height 1.0)

      (setq org-hide-leading-stars t
        org-ellipsis "⤵"
        org-src-fontify-natively t
        org-src-window-setup 'current-window
        org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)" "MEETING(m)" "IDEA(i)")
                  (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)"))

        org-todo-keyword-faces '(("TODO" :foreground "red" :weight bold)
                      ("NEXT" :foreground "blue" :weight bold)
                      ("DONE" :foreground "forest green" :weight bold)
                      ("WAITING" :foreground "orange" :weight bold)
                      ("HOLD" :foreground "magenta" :weight bold))
        org-todo-state-tags-triggers '(
                        ("WAITING" ("WAITING" . t))
                        ("HOLD" ("WAITING") ("HOLD" . t))
                        (done ("WAITING") ("HOLD"))
                        ("TODO" ("WAITING") ("HOLD"))
                        ("NEXT" ("WAITING") ("HOLD"))
                        ("DONE" ("WAITING") ("HOLD")))))
#+END_SRC

*** Org Roam
Org-roam is a plain-text *knowledge management system*. It brings some of *Roam's* more powerful features into the Org-mode ecosystem.
Org-roam borrows principles from the *Zettelkasten* method, providing a solution for non-hierarchical note-taking. It should also work as a plug-and-play solution for anyone already using Org-mode for their personal wiki.

**** TODO Switch to straight.el to add support for org-roam
#+BEGIN_SRC emacs-lisp
  ;; (use-package org-roam
  ;;   :ensure t
  ;;   :custom
  ;;     (org-roam-directory (concat aj/org-path "/roam"))
  ;;   :bind (("C-c n l" . org-roam-buffer-toggle)
  ;;          ("C-c n f" . org-roam-node-find)
  ;;          ("C-c n g" . org-roam-graph)
  ;;          ("C-c n i" . org-roam-node-insert)
  ;;          ("C-c n c" . org-roam-capture)
  ;;          ;; Dailies
  ;;          ("C-c n j" . org-roam-dailies-capture-today))
  ;;   :config
  ;;     (org-roam-db-autosync-mode))

  ;; (use-package org-roam-ui
  ;;   :ensure t
  ;;   :custom
  ;;     (org-roam-ui-sync-theme t)
  ;;     (org-roam-ui-follow t)
  ;;     (org-roam-ui-update-on-save t)
  ;;     (org-roam-ui-open-on-start t))
#+END_SRC
*** ORG Babel
#+BEGIN_SRC emacs-lisp
   (setq org-plantuml-jar-path "~/plantuml.1.2023.7.jar")
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((plantuml . t))) ; this line activates plantuml

  (use-package ob-go
    :ensure t)
#+END_SRC
*** ORG bullets for pretty bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode))
#+END_SRC

*** ORG Super Agenda
This package lets you “supercharge” your Org daily/weekly agenda. The idea is to group items into sections, rather than having them all in one big list.

#+BEGIN_SRC emacs-lisp
  (use-package org-super-agenda
    :ensure t
    :after org
    :config
      ;; Enable org-super-agenda globally
      ;;(org-super-agenda-mode)

      ;; Define custom super-agenda groups
      (setq org-super-agenda-groups '((:name "Schedule"
                                            :time-grid t
                                            :scheduled today)
                                      (:name "Due"
                                            :deadline today)
                                      (:name "Due Soon"
                                            :deadline future)
                                      (:name "Overdue"
                                            :deadline past)
                                      (:name "Important"
                                            :priority "A")
                                      (:name "Waiting"
                                            :tag "Waiting")))

      ;; Activate org-super-agenda when org-agenda is opened
      (add-hook 'org-agenda-mode-hook 'org-super-agenda-mode))

#+END_SRC
*** Org Github flavored markdown export
This package adds an Org mode export backend for GitHub Flavored Markdown.
#+BEGIN_SRC emacs-lisp
  (use-package ox-gfm
    :ensure t
    :after org
    :config
    ;; Add any additional configuration if needed
    )
#+END_SRC
*** Org Capture Templates / Agenda
  Define capture templates for various types of entries.
  Also set the agenda path for org mode so it knows where to retrieve
  org files for the agenda.

 #+BEGIN_SRC emacs-lisp
   ;; set the org-agenda files to the org path and add emacs.d/config.org to the agenda files
   (setq org-agenda-files
     (append
      (directory-files-recursively aj/org-path "\\.org$")
      (list "~/.emacs.d/config.org")))

   ;; Define the path to your journal.org file
   (setq journal-file (concat aj/org-path "/journal.org"))

   ;; Org capture templates
   (setq org-capture-templates
         `(("t" "todo" entry (file+datetree ,journal-file)
           "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
           ;; ("r" "respond" entry (file+datetree ,journal-file)
           ;; "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
           ("n" "note" entry (file+datetree ,journal-file)
           "* NOTE %? :NOTE:\n%U\n%a\n" :immediate-finish t)
           ("i" "idea" entry (file+datetree ,journal-file)
           "* IDEA %? :IDEA:\n%U\n%a\n" :immediate-finish t)
           ("w" "org-protocol" entry (file+datetree ,journal-file)
           "* TODO Review %c\n%U\n" :immediate-finish t)
           ("m" "Meeting" entry (file+datetree ,journal-file)
           "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)))
 #+END_SRC

*** ORG Fiscal Quarter support
At work we use fiscal quarters during the planning cycle:
| Quarter | start      | end        |
|---------+------------+------------|
| FQ1     | February 1 | April 30   |
| FQ2     | May 1      | July 31    |
| FQ3     | August 1   | October 31 |
| FQ4     | November 1 | January 31 |

#+BEGIN_SRC emacs-lisp
        (defvar my-org-fiscal-year-start-month 2
          "The starting month of the fiscal year. Default is February (2).")

        (defun my-org-agenda-fiscal-quarter-view ()
          "Display the agenda for the remainder of the current fiscal quarter with a custom heading.
        The fiscal year start month is defined by `my-org-fiscal-year-start-month`."
          (interactive)
          (let* ((current-date (decode-time (current-time)))
                 (month (nth 4 current-date))
                 (year (nth 5 current-date))
                 (day (nth 3 current-date))
                 (fiscal-year (if (< month my-org-fiscal-year-start-month) (1- year) year))
                 (quarter (cond
                           ((and (>= month my-org-fiscal-year-start-month)
                                 (< month (+ my-org-fiscal-year-start-month 3))) 1)
                           ((and (>= month (+ my-org-fiscal-year-start-month 3))
                                 (< month (+ my-org-fiscal-year-start-month 6))) 2)
                           ((and (>= month (+ my-org-fiscal-year-start-month 6))
                                 (< month (+ my-org-fiscal-year-start-month 9))) 3)
                           (t 4)))
                 (quarter-start (cond
                                 ((eq quarter 1) (format "%d-%02d-01" fiscal-year my-org-fiscal-year-start-month))
                                 ((eq quarter 2) (format "%d-%02d-01" fiscal-year (+ my-org-fiscal-year-start-month 3)))
                                 ((eq quarter 3) (format "%d-%02d-01" fiscal-year (+ my-org-fiscal-year-start-month 6)))
                                 (t (format "%d-%02d-01" fiscal-year (+ my-org-fiscal-year-start-month 9)))))
                 (quarter-end (cond
                               ((eq quarter 1) (format "%d-%02d-%02d" fiscal-year (+ my-org-fiscal-year-start-month 3 -1)
                                                       (calendar-last-day-of-month (+ my-org-fiscal-year-start-month 3 -1) fiscal-year)))
                               ((eq quarter 2) (format "%d-%02d-%02d" fiscal-year (+ my-org-fiscal-year-start-month 6 -1)
                                                       (calendar-last-day-of-month (+ my-org-fiscal-year-start-month 6 -1) fiscal-year)))
                               ((eq quarter 3) (format "%d-%02d-%02d" fiscal-year (+ my-org-fiscal-year-start-month 9 -1)
                                                       (calendar-last-day-of-month (+ my-org-fiscal-year-start-month 9 -1) fiscal-year)))
                               (t (format "%d-%02d-%02d" (1+ fiscal-year) (- my-org-fiscal-year-start-month 1)
                                          (calendar-last-day-of-month (- my-org-fiscal-year-start-month 1) (1+ fiscal-year))))))
                 (days-in-quarter (time-to-days (date-to-time quarter-end)))
                 (days-from-now (time-to-days (current-time)))
                 (days-remaining (- days-in-quarter days-from-now))
                 ;; (custom-heading (format "Current Fiscal Quarter %d" quarter))
  (custom-heading (propertize (format "Current Fiscal Quarter %d" quarter)
                                       'face '(:weight bold :height 1.0 :foreground "blue")))
    )
            (setq org-agenda-custom-commands
                  `(("Q" ,custom-heading
                     agenda ""
                     ((org-agenda-span ,days-remaining)
                      (org-agenda-start-day ,(format-time-string "%Y-%m-%d"))
                      (org-agenda-use-time-grid nil) ;; Disable the time grid
                      (org-super-agenda-groups nil) ;; Disable org-super-agenda for this command
                      (org-agenda-prefix-format '((agenda . "  %?-12t% s")))
                      (org-agenda-overriding-header ,custom-heading)
                      (org-agenda-skip-function
                       '(lambda ()
                        (let ((category (org-get-category)))
                          (if (string= category "Work")
                              nil
                            (save-excursion (or (outline-next-heading) (point-max))))))))))) ;; Only show TODO items
            (org-agenda nil "Q")))

            (global-set-key (kbd "C-c q") 'my-org-agenda-fiscal-quarter-view)
#+END_SRC

*** Refile Configuration
  Configure refile targets and related settings.

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (setq mk/org-path "/Users/alexander/Library/Mobile Documents/com~apple~CloudDocs/Malak/Beorg/malak.org")

    (setq
      org-refile-targets '(
        (nil :maxlevel . 9)
        (org-agenda-files :maxlevel . 9)
        ("~/.emacs.d/config.org" :maxlevel . 3)
        (mk/org-path :maxlevel . 3))
        org-refile-use-outline-path t
        org-outline-path-complete-in-steps nil
        org-refile-allow-creating-parent-nodes 'confirm
        org-indirect-buffer-display 'current-window)

    (advice-add 'org-refile :after #'org-save-all-org-buffers)
    (advice-add 'org-agenda-refile :after #'org-save-all-org-buffers)
  )
#+END_SRC

*** Exclude DONE State Tasks from Refile Targets
 Exclude tasks in the DONE state from being listed as refile targets.

#+BEGIN_SRC emacs-lisp
 ;; Exclude DONE state tasks from refile targets
 (defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets."
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))
 (setq org-refile-target-verify-function 'bh/verify-refile-target)
#+END_SRC

*** Global Keybinding for Org-Capture
 Set a global keybinding for quickly accessing org-capture.

#+BEGIN_SRC emacs-lisp
 ;; Global keybinding for org-capture
 (global-set-key (kbd "C-c c") 'org-capture)
 (global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC

* VII. Shell and Terminal Integration
** Shell Mode Configuration
*** Share Shell History
#+BEGIN_SRC emacs-lisp
(defun my-shell-mode-hook ()
  "Set up shell mode to share history and remove duplicates."
  (setq comint-input-ring-file-name "~/.zsh_history") ;; or bash_history
  (comint-read-input-ring t))
(add-hook 'shell-mode-hook 'my-shell-mode-hook)
#+END_SRC

*** Remove Duplicates from History
#+BEGIN_SRC emacs-lisp
(setq history-delete-duplicates t)
#+END_SRC

** ANSI Term Configuration
*** Kill Buffer When ANSI Term Exits
#+BEGIN_SRC emacs-lisp
(defadvice term-sentinel (around my-advice-term-sentinel (proc msg))
  "Kill buffer when ansi-term exits."
  (if (memq (process-status proc) '(signal exit))
      (let ((buffer (process-buffer proc)))
        ad-do-it
        (kill-buffer buffer))
    ad-do-it))
(ad-activate 'term-sentinel)
#+END_SRC

*** Use Zsh by Default in ANSI Term
#+BEGIN_SRC emacs-lisp
(defvar my-term-shell "/bin/zsh")
(defadvice ansi-term (before force-zsh)
  "Use zsh as the default shell in ansi-term."
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)
#+END_SRC

*** Use UTF-8 Encoding in ANSI Term
#+BEGIN_SRC emacs-lisp
(defun my-term-use-utf8 ()
  "Set buffer process coding system to utf-8."
  (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))
(add-hook 'term-exec-hook 'my-term-use-utf8)
#+END_SRC

** Exec-Path-From-Shell Configuration
*** Initialize on all systems
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config
  (exec-path-from-shell-initialize))
#+END_SRC

*** Initialize only on macOS and NS
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :defer t
  :config
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize)))
#+END_SRC

** Rg (Ripgrep) Configuration
#+BEGIN_SRC emacs-lisp
(use-package rg
  :ensure t
  :defer t
  :hook (rg-mode . (lambda ()
                      (wgrep-rg-setup)
                      (define-key rg-mode-map (kbd "n") 'evil-search-next)
                      (define-key rg-mode-map (kbd "N") 'evil-search-previous)))
  :config
  (setq rg-executable "/usr/local/bin/rg"
        rg-highlight-search t
        rg-reuse-buffers t
        rg-reuse-window t))
#+END_SRC

** Eshell Configuration

#+BEGIN_SRC emacs-lisp
  (defun aj/eshell-send-c-c ()
    "Send C-c to the current process in Eshell."
    (interactive)
    (let ((proc (get-buffer-process (current-buffer))))
      (if proc
          (interrupt-process proc)
        (message "No process in current buffer"))))

  (with-eval-after-load 'eshell
    (define-key eshell-mode-map (kbd "C-c") 'aj/eshell-send-c-c))
#+END_SRC
* VIII. System Configuration
** Locale Configuration
#+BEGIN_SRC emacs-lisp
(setenv "LANG" "en_US.UTF-8")
(set-language-environment "UTF-8")
#+END_SRC

* IX. Version Control
** Magit configuration
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :commands (magit-status magit-get-current-branch)
    :config
    (general-create-definer my-leader-def
        :prefix "SPC")
    (my-leader-def
      "g"  '(:ignore t :which-key "git")
      "gs" '(magit-status :which-key "status")
      "gb" '(magit-branch :which-key "branch")
      "gc" '(magit-commit :which-key "commit")))

  (use-package magit-todos
    :after magit
    :config (magit-todos-mode 1))

;; Use single frame for ediff
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
(setq ediff-split-window-function 'split-window-horizontally) ;; Horizontal split
#+END_SRC
** Magit Forge
#+BEGIN_SRC emacs-lisp
  ;; (use-package forge
  ;;   :after magit
  ;;   :ensure t
  ;;   :config)

  ;; (use-package auth-source
  ;;   :config
  ;;   (setq auth-sources '("~/.authinfo")))
#+END_SRC

this configuration will show 100 open topics and never show any closed topics, for both issues and pull requests.
#+BEGIN_SRC emacs-lisp
  (setq  forge-topic-list-limit '(100 . 0))
#+END_SRC
* X. Fuzzy Searching and File Exploration
** ido-occasional configuration
#+BEGIN_SRC emacs-lisp
(use-package ido-occasional
  :ensure t)
#+END_SRC

** Vertico
Vertico provides a vertical completion UI for Emacs, replacing Selectrum.

#+BEGIN_SRC emacs-lisp
;; Vertico setup
(use-package vertico
  :ensure t
  :init
  (vertico-mode))
#+END_SRC

** Orderless
Orderless provides a flexible completion style that works well with Vertico.

#+BEGIN_SRC emacs-lisp
  ;; Orderless setup
  (use-package orderless
    :ensure t
    :custom
      (completion-styles '(orderless))
      (completion-category-defaults nil)
      (completion-category-overrides '((file (styles partial-completion))))
      (orderless-matching-styles '(orderless-literal orderless-regexp)))
#+END_SRC

** Marginalia
Marginalia adds annotations to the minibuffer completions, enhancing the completion experience.

#+BEGIN_SRC emacs-lisp
;; Marginalia setup
(use-package marginalia
  :ensure t
  :init
  (marginalia-mode))
#+END_SRC

** Nerd icons
#+BEGIN_SRC emacs-lisp
(use-package nerd-icons-completion
  :after marginalia
  :config
  (nerd-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
#+END_SRC
** Consult
Consult provides various enhanced search and navigation commands.

#+BEGIN_SRC emacs-lisp
  ;; Consult setup
  (use-package consult
    :ensure t
    :bind (("C-s" . consult-line)
           ("C-x b" . consult-buffer)
           ("C-x /" . consult-ripgrep)
           ("M-y" . consult-yank-pop)
           ;; Other bindings for consult functions can go here
           )
    :custom
    (consult-project-root-function
     (lambda ()
       (when-let (project (project-current))
         (car (project-roots project))))))
#+END_SRC

** TODO Embark
Embark provides context-sensitive actions for minibuffer completions.

#+BEGIN_SRC emacs-lisp
;; Embark setup
(use-package embark
  :ensure t
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))
#+END_SRC

** Embark-Consult Integration
Embark-Consult provides integration between Embark and Consult, enabling consult previews.

#+BEGIN_SRC emacs-lisp
;; Embark-consult integration
(use-package embark-consult
  :ensure t
  :after (embark consult)
  :demand t
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC

** Optional Configurations
Additional optional configurations for appearance and behavior.

#+BEGIN_SRC emacs-lisp
;; Enable rich annotations using the Marginalia package
(use-package marginalia
  :ensure t
  :init
  (marginalia-mode))

;; Optional: Configure the appearance and behavior of the packages
(custom-set-variables
 '(vertico-cycle t))  ;; Enable cycling for `vertico-next' and `vertico-previous'
#+END_SRC


* XI. Configuration Management
** Auto-reload Configuration
#+BEGIN_SRC emacs-lisp
(defun aj/reload-config-on-save ()
  "Reload config.org if it is saved."
  (when (string-equal (file-truename (buffer-file-name))
                      (file-truename "~/.emacs.d/config.org"))
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org"))))

(add-hook 'after-save-hook 'aj/reload-config-on-save)
#+END_SRC
