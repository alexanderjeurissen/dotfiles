#/usr/bin/env zsh
#vim: set foldlevel=0 foldmethod=marker 

# Git hooks {{{
  ### Set highlighting based on dirty state
  # Make sure you have added misc to your 'formats':  %m
  +vi-git-status() {
    local action="${hook_com[action]}"
    local action_symbol

    if [[ -n $action ]]; then
      if [[ "$action" == "rebase" ]]; then
        action_symbol="%F{magenta}"
      elif [[ "$action" == "merge" ]]; then
        action_symbol="%F{yellow}"
      fi
    else
      action_symbol="%F{blue}"
    fi 


    if ( test -z "$(command git status --porcelain --ignore-submodules -unormal)" ); then
      hook_com[misc]="${action_symbol}"
    else
      hook_com[misc]="%U${action_symbol}"
    fi

    # merge conflict: 
    # Rebase: 
    # Merge: 
  }

# }}}

_generate_prompt() {
  # check that no command is currently running, 
  # the preprompt will otherwise be rendered in the wrong place
  #•
  #›

  local prompt_content="${prompt_newline}"
  local prompt_sym
  local ok_color

  if [[ "$USER" == "root" ]]; then
    prompt_sym="#"
    ok_color="yellow"
  else
    prompt_sym="λ"
    ok_color="green"
  fi

  # # get timestamp of command execution
  # prompt_content+="%F{8}%*%f"

  # Only print host name when connected through ssh
  if [[ "$SSH_CONNECTION" != '' ]]; then
    prompt_content+="%F{yellow} %m%f"
  fi

  # add exit code based color to prompt symbol
  prompt_content+="%B%(?.%F{${ok_color}} ${prompt_sym} %f.%F{red} ${prompt_sym} %f)%b"

  PROMPT="${(j..)prompt_content}"
}

_generate_rprompt() {
  # store working_tree without the "x" prefix
  local rprompt_content
  local working_tree="${vcs_info_msg_1_}"

  # construct prompt, beginning with path (only shows last two segments of ptah)
  rprompt_content+=" %(3~|%2~|%~)"

  # VCS info
  if [[ -n $working_tree ]]; then
    rprompt_content+="${vcs_info_msg_0_}"
  fi

  RPROMPT="%F{8}${rprompt_content}%f"
}

prompt_snappy_setup() {
  # prevent percentage showing up
  # if output doesn't end with a newline
  export PROMPT_EOL_MARK=''
  setopt prompt_subst

  # Borrowwed from sindresorhus/pure
  if [[ -z $prompt_newline ]]; then
    # This variable needs to be set, usually set by promptinit.
    typeset -g prompt_newline=$'\n%{\r%}'
  fi

  zmodload zsh/datetime
  zmodload zsh/zle

  autoload -Uz add-zsh-hook
  autoload -Uz vcs_info

  zstyle ':vcs_info:*' enable git
  zstyle ':vcs_info:*' use-simple true
  zstyle ':vcs_info:*' max-exports 3
  zstyle ':vcs_info:git*' formats ' %m %0.20b%f%u' '%R'
  zstyle ':vcs_info:git*' actionformats ' %m %0.20b%f%u' '%0.20b|%a' '%R'
  zstyle ':vcs_info:git*+set-message:*' hooks git-status

  add-zsh-hook precmd vcs_info
  add-zsh-hook precmd _generate_prompt # generate prompt
  add-zsh-hook precmd _generate_rprompt # generate prompt
}

prompt_snappy_setup "$@"
## vim:ft=zsh
